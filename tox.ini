[tox]
isolated_build = True
minversion = 3.20.0
distshare = {homedir}/.tox/distshare
envlist =
    linting
    py36
    py37
    py38
    py39
    py310
    pypy3
    py37-{pexpect,xdist,unittestextras,numpy,pluggymain}

[testenv]
commands =
    {env:_SQLTEST_TOX_COVERAGE_RUN:} unittest discover tests/unit
    coverage: coverage combine
    coverage: coverage report -m
passenv = USER USERNAME COVERAGE_*  TERM
setenv =
    # Configuration to run with coverage similar to CI, e.g.
    # "tox -e py37-coverage".
    coverage: _SQLTEST_TOX_COVERAGE_RUN=coverage run -m
    coverage: COVERAGE_FILE={toxinidir}/.coverage
    coverage: COVERAGE_PROCESS_START={toxinidir}/.coveragerc
extras = testing
deps =
    doctesting: PyYAML
    pexpect: pexpect>=4.8.0
    pluggymain: pluggy @ git+https://github.com/pytest-dev/pluggy.git
    unittestextras: twisted
    unittestextras: asynctest
    xdist: coverage
    xdist: -e .

[testenv:linting]
skip_install = True
basepython = python3
deps = pre-commit>=2.9.3
commands = pre-commit run --all-files --show-diff-on-failure {posargs:}

[testenv:docs]
;basepython = python3
;usedevelop = True
;deps =
;    -r{toxinidir}/doc/en/requirements.txt
;    towncrier
;commands =
;    python scripts/towncrier-draft-to-file.py
;    # the '-t changelog_towncrier_draft' tags makes sphinx include the draft
;    # changelog in the docs; this does not happen on ReadTheDocs because it uses
;    # the standard sphinx command so the 'changelog_towncrier_draft' is never set there
;    sphinx-build -W --keep-going -b html doc/en doc/en/_build/html -t changelog_towncrier_draft {posargs:}

[testenv:docs-checklinks]
;basepython = python3
;usedevelop = True
;changedir = doc/en
;deps = -r{toxinidir}/doc/en/requirements.txt
;commands =
;    sphinx-build -W -q --keep-going -b linkcheck . _build

[testenv:release]
decription = do a release, required posarg of the version number
basepython = python3
usedevelop = True
passenv = *
deps =
    colorama
    github3.py
    pre-commit>=2.9.3
    wheel
    towncrier
commands = python scripts/release.py {posargs}

[testenv:prepare-release-pr]
decription = prepare a release PR from a manual trigger in GitHub actions
usedevelop = {[testenv:release]usedevelop}
passenv = {[testenv:release]passenv}
deps = {[testenv:release]deps}
commands = python scripts/prepare-release-pr.py {posargs}

[testenv:publish-gh-release-notes]
description = create GitHub release after deployment
basepython = python3
usedevelop = True
passenv = GH_RELEASE_NOTES_TOKEN GITHUB_REF GITHUB_REPOSITORY
deps =
    github3.py
    pypandoc
commands = python scripts/publish-gh-release-notes.py {posargs}

[flake8]
max-line-length = 120
extend-ignore =
; whitespace before ':'
    E203
; Missing Docstrings
    D100,D101,D102,D103,D104,D105,D106,D107
; Whitespace Issues
    D202,D203,D204,D205,D209,D213
; Quotes Issues
    D302
; Docstring Content Issues
    D400,D401,D401,D402,D405,D406,D407,D408,D409,D410,D411,D412,D413,D414,D415,D416,D417
exclude = .venv,.git,__pycache__,build

[isort]
; This config mimics what reorder-python-imports does.
force_single_line = 1
known_localfolder = sqltest
known_third_party = test_source,test_excinfo
force_alphabetical_sort_within_sections = 1
